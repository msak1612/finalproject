name: "Fibonacci Sequence"
level: 1
tags:
    - RECURSION
    - DYNAMIC PROGRAMMING
description: |

    The Fibonacci Sequence is the series of numbers:

    > 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...

    The next number is found by adding up the two numbers before it.

    The 2 is found by adding the two numbers before it (1+1)
    The 3 is found by adding the two numbers before it (1+2),
    And the 5 is (2+3),
    and so on!

    ### Examples
    ```javascript
      fibonacci(3) -> [1,1,2]
      fibonacci(7) -> [1, 1, 2, 3, 5, 8, 13]
    ```
solution: |
    export default function fibonacci(n) {
      if (n < 1) {
        return [];
      }

      let a = 0;
      let b = 1;
      let result = [];
      for (let i = 0; i < n;++i) {
        result[i]=b;
        let tmp = a;
        a = b;
        b += tmp;
      }
      return result;
    }
template: |
    export default function fibonacci(n) {
        // Your Playground !!!
        return 0;
    }
test: |
    import fibonacci from "./template";

    test('fibonacci(3) returns [1,1,2]', () => {
        expect(fibonacci(3)).toStrictEqual([1,1,2]);
    });

    test('fibonacci(7) returns [1, 1, 2, 3, 5, 8, 13]', () => {
        expect(fibonacci(7)).toStrictEqual([1, 1, 2, 3, 5, 8, 13]);
    });
